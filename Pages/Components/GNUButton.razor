@if (ButtonType == "submit")
{
    <button type="submit" class="GNUButton"
        style="padding: @(VerticalPadding)px @(HorizontalPadding)px; font-size: @(FontSize); height: @(Height); width: @(Width);">
        @Text
    </button>
}
else
{
    <button type="@ButtonType" class="GNUButton"
        style="padding: @(VerticalPadding)px @(HorizontalPadding)px;  font-size: @(FontSize); height: @(Height); width: @(Width);"
        @onclick="HandleClick">
        @Text
    </button>
}

<style>
    .GNUButton {
        color: var(--color-black);
        font-weight: 600;
        border: 2px solid var(--color-btnborder);
        border-radius: 40px;
        background-color: var(--color-btnbackground);
        box-shadow: 0px 7px 7px rgba(0, 0, 0, 0.25);
        outline: none;
    }

    .GNUButton:hover {
        color: var(--color-white);
        background-color: var(--color-btnborder);
    }

    .GNUButton:focus,
    .GNUButton:focus-visible {
        border: 3px solid var(--color-btnborder);
    }
</style>

@code {
    [Parameter]
    public string ButtonType { get; set; } = "button";

    [Parameter]
    public required string Text { get; set; }

    [Parameter]
    public string FontSize { get; set; } = "calc(100vw/50)";

    [Parameter]
    public string Height { get; set; } = "fit-content";

    [Parameter]
    public string Width { get; set; } = "fit-content";

    [Parameter]
    public string VerticalPadding { get; set; } = "16";

    [Parameter]
    public string HorizontalPadding { get; set; } = "26";

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public string? RedirectUrl { get; set; }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    private async Task HandleClick()
    {
        if (!string.IsNullOrEmpty(RedirectUrl))
        {
            NavigationManager?.NavigateTo(RedirectUrl);
        }
        else if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(null);
        }
    }
}